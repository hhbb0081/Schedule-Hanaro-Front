name: Main Server Pull-request

on:
  pull_request:
    branches: ['main']

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check branch
        run: |
          echo "Head branch is: ${{ github.head_ref }}"
          echo "Base branch is: ${{ github.base_ref }}"
          if [[ "${{ github.head_ref }}" != "develop" ]]; then
            echo "develop 브랜치가 아님"
            exit 1
          fi
      - name: Checkout source code. # Repo checkout
        uses: actions/checkout@v3

      - name: Check Node v # Node v 확인
        run: node -v

      # - name: Set .env from secrets
      #   run: |
      #     echo "PORT=${{ secrets.MAIN_PORT }}" > .env
      #     echo "WDS_SOCKET_PORT=0" >> .env
      #     echo "NODE_PATH=src/" >> .env
      #     echo "REACT_APP_API_ROOT=${{ secrets.MAIN_REACT_APP_API_ROOT }}" >> .env
      #     echo "REACT_APP_HOME_URL=${{ secrets.MAIN_REACT_APP_HOME_URL }}" >> .env

      # - name: cat env file
      #   run: cat .env
      - name: Setup pnpm
        uses: pnpm/action-setup@v4.0.0
        with:
          version: 9

      - name: Install dependencies # 의존 파일 설치
        run: pnpm install

      - name: Generate wbuild # React Build
        run: pnpm build

  after:
    runs-on: ubuntu-latest
    needs: build
    if: always()
    steps:
      - name: Comment on failure and close PR
        if: needs.build.result == 'failure'
        uses: actions/github-script@v6
        with:
          github-token: ${{ github.token }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '빌드 실패'
            });

            github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              state: 'closed'
            });

      # 2. Docker 로그인 (Docker Hub 계정 필요)
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/schedule-hanaro-client:latest

      # 3. Docker 이미지 빌드
      # - name: Build and Push Docker image
      #   run: |
      #     docker build -t ${{ secrets.DOCKER_USERNAME }}/schedule-hanaro-client:latest .
      #     docker push ${{ secrets.DOCKER_USERNAME }}/schedule-hanaro-client:latest

      # 5. SSH로 EC2에 접속하여 배포
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 80
          script: |
            docker pull ${{ secrets.DOCKER_USERNAME }}/schedule-hanaro-client:latest
            docker stop schedule-hanaro-client || true
            docker rm schedule-hanaro-client || true
            docker run -d -p 80:80 --name schedule-hanaro-client ${{ secrets.DOCKER_USERNAME }}/schedule-hanaro-client:latest
